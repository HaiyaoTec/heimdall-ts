/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/income/{userId}": {
    patch: operations["boardIncome"];
    parameters: {
      path: {
        userId: number;
      };
    };
  };
  "/mail": {
    get: operations["getMail"];
  };
}

export interface components {
  schemas: {
    /** Mail */
    Mail: {
      content: string;
      mainIcon: string;
      subIcon?: string;
      buttonContent?: string;
      buttonEffect: {
        url?: string;
        items?: {
          rewardType?: string;
          rewardCount?: number;
        }[];
      };
      args?: { [key: string]: unknown };
      expireTime: number;
      sendTime?: number;
    };
  };
}

export interface operations {
  boardIncome: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  getMail: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mail"][];
        };
      };
    };
  };
}

export interface external {}

import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

export class Api {

    public asgardClientConfig: AsgardClientConfig;
  
    public asgardClient: AsgardClient
  
    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }
  
    connect() {
      this.asgardClient.connect()
    }
  
  
    

    /**
     * 
     * 新邮件广播
     */
    boardIncome(parameter:operations["boardIncome"]["parameters"]["path"],){
    
      return this.asgardClient.broadcast<operations["boardIncome"]["responses"]["200"]["content"]["application/json"]>(`/mail/income/${parameter["userId"]}`)
    

     }   
      
    

    /**
     * 
     * 邮件
     */
    getMail(){
    
      return this.asgardClient.get<operations["getMail"]["responses"]["200"]["content"]["application/json"]>("/mail/mail")
    

     }   
      
}

import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

export class Api {

    public asgardClientConfig: AsgardClientConfig;
  
    public asgardClient: AsgardClient
  
    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }
  
    connect() {
      this.asgardClient.connect()
    }
  
  
    

    /**
     * 
     * 新邮件广播
     */
    boardIncome(parameter:operations["boardIncome"]["parameters"]["path"],){
    
      return this.asgardClient.broadcast<operations["boardIncome"]["responses"]["200"]["content"]["application/json"]>(`/mail/income/${parameter["userId"]}`)
    

     }   
      
    

    /**
     * 
     * 邮件
     */
    getMail(){
    
      return this.asgardClient.get<operations["getMail"]["responses"]["200"]["content"]["application/json"]>("/mail/mail")
    

     }   
      
}

import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

export class Api {

    public asgardClientConfig: AsgardClientConfig;
  
    public asgardClient: AsgardClient
  
    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }
  
    connect() {
      this.asgardClient.connect()
    }
  
  
    

    /**
     * 
     * 设备号登陆
     */
    loginDeviceNumber(payload:operations["login-deviceNumber"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["login-deviceNumber"]["responses"]["200"]["content"]["application/json"]>("/user/login/deviceNumber",payload)
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    getAchievements(){
    
      return this.asgardClient.get<operations["get-achievements"]["responses"]["200"]["content"]["application/json"]>("/user/achievement")
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    get-Reward(payload:operations["get-Reward"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["get-Reward"]["responses"]["200"]["content"]["application/json"]>("/user/achievement/getReward",payload)
    

     }   
      
}

import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

export class Api {

    public asgardClientConfig: AsgardClientConfig;
  
    public asgardClient: AsgardClient
  
    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }
  
    connect() {
      this.asgardClient.connect()
    }
  
  
    

    /**
     * 
     * 设备号登陆
     */
    loginDeviceNumber(payload:operations["login-deviceNumber"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["login-deviceNumber"]["responses"]["200"]["content"]["application/json"]>("/user/login/deviceNumber",payload)
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    getAchievements(){
    
      return this.asgardClient.get<operations["get-achievements"]["responses"]["200"]["content"]["application/json"]>("/user/achievement")
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    getReward(payload:operations["get-Reward"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["get-Reward"]["responses"]["200"]["content"]["application/json"]>("/user/achievement/getReward",payload)
    

     }   
      
}

  import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

class Api {

  public asgardClientConfig: AsgardClientConfig;

  public asgardClient: AsgardClient

  constructor(asgardClientConfig:AsgardClientConfig) {
    this.asgardClientConfig = asgardClientConfig
    this.asgardClient = new AsgardClient(this.asgardClientConfig)
  }

  connect() {
    this.asgardClient.connect()
  }

  loginDeviceNumber<T>(payload:operations["loginDeviceNumber"]["requestBody"]["content"]["application/json"]) {
    return this.asgardClient.get<operations["loginDeviceNumber"]["responses"]["200"]["content"]["application/json"]>('/login/deviceNumber', payload)
  }

}
  class Api {

    public asgardClientConfig: AsgardClientConfig;

    public asgardClient: AsgardClient

    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }

    connect() {
      this.asgardClient.connect()
    }

    loginDeviceNumber<T>(payload:operations["login-deviceNumber"]["requestBody"]["content"]["application/json"]) {
      return this.asgardClient.get<operations["login-deviceNumber"]["responses"]["200"]["content"]["application/json"]>('/login/deviceNumber', payload)
    }
    
  }

}
  
import {AsgardClient, AsgardClientConfig} from "@imf/asgard-client";

export class Api {

    public asgardClientConfig: AsgardClientConfig;
  
    public asgardClient: AsgardClient
  
    constructor(asgardClientConfig:AsgardClientConfig) {
      this.asgardClientConfig = asgardClientConfig
      this.asgardClient = new AsgardClient(this.asgardClientConfig)
    }
  
    connect() {
      this.asgardClient.connect()
    }
  
  
    

    /**
     * 
     * 设备号登陆
     */
    loginDeviceNumber(payload:operations["login-deviceNumber"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["login-deviceNumber"]["responses"]["200"]["content"]["application/json"]>("/user/login/deviceNumber",payload)
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    getAchievements(){
    
      return this.asgardClient.get<operations["get-achievements"]["responses"]["200"]["content"]["application/json"]>("/user/achievement")
    

     }   
      
    

    /**
     * 
     * Your GET endpoint
     */
    getReward(payload:operations["get-Reward"]["requestBody"]["content"]["application/json"]){
    
      return this.asgardClient.get<operations["get-Reward"]["responses"]["200"]["content"]["application/json"]>("/user/achievement/getReward",payload)
    

     }   
      
}
